1 Write a function that returns the largest element in a list.

2 Write function that reverses a list, preferably in place.

3 Write a function that checks whether an element occurs in a list.

4 Write a function that returns the elements on odd positions in a list.

5 Write a function that computes the running total of a list.

6 Write a function that tests whether a string is a palindrome.

7 Write three functions that compute the sum of the numbers in a list: using a for-loop, a while-loop and recursion. (Subject to availability of these constructs in your language of choice.)

8 Write a function on_all that applies a function to every element of a list. Use it to print the first twenty perfect squares.

9 Write a function that concatenates two lists.

10 Write a function that combines two lists by alternatingly taking elements, e.g. [a,b,c], [1,2,3] → [a,1,b,2,c,3].

11 Write a function that merges two sorted lists into a new list.

12 Write a function that rotates a list by k elements. For example [1,2,3,4,5,6] rotated by two becomes [3,4,5,6,1,2]. Try solving this without creating a copy of the list. How many swap or move operations do you need?

13 Write a function that computes the list of the first 100 Fibonacci numbers.

14 Write a function that takes a number and returns a list of its digits.

15 Write functions that add, subtract, and multiply two numbers in their digit-list representation (and return a new digit list). If you’re ambitious you can implement Karatsuba multiplication. Try different bases. What is the best base if you care about speed? If you couldn’t completely solve the prime number exercise above due to the lack of large numbers in your language, you can now use your own library for this task.

16 Implement the following sorting algorithms: Selection sort, Insertion sort, Merge sort, Quick sort, Stooge Sort. Check Wikipedia for descriptions.

17 Implement binary search.

18 Write a function that takes a list of strings an prints them, one per line, in a rectangular frame. For example the list ["Hello", "World", "in", "a", "frame"] gets printed as:

*********
* Hello *
* World *
* in    *
* a     *
* frame *
*********

19 Write function that translates a text to Pig Latin and back. English is translated to Pig Latin by taking the first letter of every word, moving it to the end of the word and adding ‘ay’. “The quick brown fox” becomes “Hetay uickqay rownbay oxfay”.
